#################
# Rust Snippets #
#################

# sqlx helper
snippet sqlx_create_uuid "sqlx create implementation"
  let query = sqlx::query_as::<_, (Uuid,)>(
      "INSERT INTO ${1:table_name} (${2:field_name}, create_time, update_time) \
      VALUES (\$1, NOW()) RETURNING id",
  )
      .bind(${3:bind_value});

  execute!(pool_or_transaction, query, fetch_one)
      .map(|r| r.0)
      .map_err(AppError::from)

snippet sqlx_update "sqlx update implementation"
  let query = sqlx::query("UPDATE ${1:table_name} SET ${2:field_name} = \$1, update_time = NOW() WHERE ${3:field_name} = \$2")
            .bind(${bind_value})
            .bind(${bind_value});

  execute_one_row_affected!(pool_or_transaction, query)

snippet sqlx_find_one "sqlx find one implementation"
  let query =
            sqlx::query_as::<_, ${1:Object}>("SELECT * FROM ${2:table_name} WHERE ${3:field_name} = \$1").bind(${4:bind_value});

  execute!(pool_or_transaction, query, fetch_optional)

snippet sqlx_find_all_vec "sqlx find all returning vec implementation"
  let query = sqlx::query_as::<_, ${1:Object}>("SELECT * FROM ${2:table_name} WHERE ${3:field_name} = \$1").bind(${4:bind_value});

  execute!(pool_or_transaction, query, fetch_all)

snippet sqlx_find_all_page "sqlx find all returning page result implementation"
  let sql_target = "FROM ${1:table_name} WHERE ${2:field_name} = $${3:index}"

  let query_items = sqlx::query_as::<_, ${}>(format!("SELECT * {} LIMIT \$${4:index} OFFSET \$${5:index}", sql_target))
        .bind(${6:bind_value})
        .bind(page.limit)
        .bind(page.offset - 1);

  let query_total = sqlx::query_as::<_, (i64,)>(format!("SELECT COUNT(*) as count {}", sql_target));

  execute_for_items_and_total!(pool_or_transaction, query_items, query_total)

snippet sqlx_exists "sqlx exists implementation"
  let query =
            sqlx::query_as::<_, (i64,)>("SELECT COUNT(*) FROM ${1;table_name} WHERE ${2:field_name} = \$${3:index}")
                .bind(${4:bind_value});

  execute_exists!(pool_or_transaction, query)

snippet sqlx_count "sqlx count implementation"
  let query = sqlx::query_as::<_, (i64,)>("SELECT COUNT(*) as count FROM ${1:table_name} WHERE ${2:field_name} = \$${3:index}");

  execute_for_count!(pool_or_transaction, query)

snippet sqlx_soft_delete "sqlx soft delete implementation"
  let query =
            sqlx::query("UPDATE ${1:table_name} SET deleted = true, delete_time = NOW() WHERE deleted = false AND id = \$1")
                .bind(id);

  execute_one_row_affected!(pool_or_transaction, query)

snippet sqlx_hard_delete_one_row "sqlx hard delete one row implementation"
  let query = sqlx::query("DELETE FROM ${1:table_name} WHERE ${2:field_name} = \$1").bind(&${3:bind_value});

  execute_one_row_affected!(pool_or_transaction, query)

snippet sqlx_hard_delete_uncertain_rows "sqlx hard delete uncertain rows implementation"
  let query = sqlx::query("DELETE FROM ${1:table_name} WHERE ${2:field_name} = \$1").bind(${3:bind_value});

  execute_uncertain_rows_affected!(pool_or_transaction, query)
